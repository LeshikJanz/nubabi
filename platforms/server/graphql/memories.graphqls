enum MemoryFilter {
  # Returns all memories
  ALL
  # Returns special memories
  SPECIAL
}

extend type Mutation {
  createMemory(input: CreateMemoryInput!): CreateOrUpdateMemoryPayload
  updateMemory(input: UpdateMemoryInput!): CreateOrUpdateMemoryPayload
  deleteMemory(input: DeleteMemoryInput!): DeleteMemoryPayload
  toggleMemoryLike(input: ToggleMemoryLikeInput!): ToggleMemoryLikePayload
}

extend type Baby {
  memories(
    before: String
    after: String
    first: Int
    last: Int
    filter: MemoryFilter
  ): MemoryConnection
  memory(id: ID!): Memory
}

type Memory implements Node, Timestampable, Commentable, Likeable {
  id: ID!
  title: String!
  description: String
  author: User!
  files(
    before: String
    after: String
    first: Int
    last: Int
    filter: FileFilter
  ): FileConnection!
  comments(
    before: String
    after: String
    first: Int
    last: Int
  ): CommentConnection!
  createdAt: DateTime!
  updatedAt: DateTime
  suggestedMemoryType: String
  likes(before: String, after: String, first: Int, last: Int): LikeConnection!
  isLikedByViewer: Boolean!
}

# A connection to a list of items.
type MemoryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [MemoryEdge]
}

type MemoryEdge {
  # The item at the end of the edge.
  node: Memory!
  # A cursor for use in pagination.
  cursor: String!
}

type Achievement {
  id: ID!
  badges(upcoming: Boolean): [Badge]
}

type Badge {
  image(
    # Width of the image that should be returned
    width: Int
    # Height of the image that should be returned
    height: Int
  ): Image
}

# A connection to a list of items.
type AchievementConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!
  # A list of edges.
  edges: [AchievementEdge]
  # Count of result set without considering pagination arguments
  count: Int!
}

type AchievementEdge {
  # The item at the end of the edge.
  node: Achievement!
  # A cursor for use in pagination.
  cursor: String!
}

input CreateMemoryInput {
  babyId: ID!
  title: String!
  files: [FileInputBase64]
  # The date chose by the user to represent this Memory's date
  createdAt: DateTime!
  # A string identifier of the suggested memory that was selected
  # when creating this memory
  suggestedMemoryType: String
  # An opaque string used by frontend frameworks like relay to track requests and responses
  clientMutationId: String
}

type CreateOrUpdateMemoryPayload {
  edge: MemoryEdge
  clientMutationId: String
}

input UpdateMemoryInput {
  id: ID!
  title: String
  createdAt: DateTime
  files: [FileInputBase64]
  removeFiles: [ID]
  suggestedMemoryType: String
}

input DeleteMemoryInput {
  id: ID!
}

type DeleteMemoryPayload {
  memory: Memory
  # An opaque string used by frontend frameworks like relay to track requests and responses
  clientMutationId: String
}

input ToggleMemoryLikeInput {
  id: ID!
  isLiked: Boolean!
}

type ToggleMemoryLikePayload {
  edge: MemoryEdge
  # An opaque string used by frontend frameworks like relay to track requests and responses
  clientMutationId: String
}
