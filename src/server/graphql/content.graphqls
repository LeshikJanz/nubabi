extend type Viewer {
  allTips(before: String, after: String, first: Int, last: Int): TipConnection!
  allQuotes(before: String, after: String, first: Int, last: Int): QuoteConnection!
  allArticles(before: String, after: String, first: Int, last: Int): ArticleConnection!
  article(id: ID!): Article
  growthArticle(id: ID!, babyId: ID!): GrowthArticle
}

interface Content {
  id: ID!
  text: String!
}

# A Tip used in the Did You Know section
type Tip implements Content {
  id: ID!
  text: String!
}

# A connection to a list of items.
type TipConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TipEdge]
}

type TipEdge {
  # The item at the end of the edge.
  node: Tip!

  # A cursor for use in pagination.
  cursor: String!
}

type Quote implements Content {
  id: ID!
  author: String
  text: String!
  title: String
}

# A connection to a list of items.
type QuoteConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [QuoteEdge]
}

type QuoteEdge {
  # The item at the end of the edge.
  node: Quote!

  # A cursor for use in pagination.
  cursor: String!
}

# A blog post
type Article implements Node, Content {
  id: ID!
  title: String!
  text: String!
  summary: String!
  publishedAt: DateTime!
  author: Author!
  tags: [Tag]
  image: Image!
  readingTime: ReadingTime!
}

# A connection to a list of items.
type ArticleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ArticleEdge]
}

type ArticleEdge {
  # The item at the end of the edge.
  node: Article!

  # A cursor for use in pagination.
  cursor: String!
}

type Author {
  id: ID!
  name: String!
  biography: String
  avatar: Avatar
}

type Tag {
  id: ID!
  name: String!
}

type ReadingTime {
  text: String!
  time: Int!
  words: Int!
}
