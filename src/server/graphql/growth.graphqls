extend type Baby {
  growth: GrowthConnection!
}

enum AgeDuration {
  WEEK
  MONTH
  YEAR
}

type Growth implements Node {
  id: ID!
  title: String!
  introduction: String!
  content: String!

  # Minimum baby age in ageDuration units
  minimumAge: Int!

  # Maximum baby age in ageDuration units
  maximumAge: Int!

  # Age duration
  ageDuration: AgeDuration!

  # Expert who gave this content's advice
  expert: Expert!

  # Links to articles (blog posts)
  growthDevelopmentArticleLinks: ArticleConnection!

  # Links to library content (Growth & Development)
  growthDevelopmentContentLinks: GrowthArticleConnection!

  # Links to articles (blog posts)
  introductionArticleLinks: ArticleConnection!

  # Links to library content (introductory section)
  introductionContentLinks: GrowthArticleConnection!
}

type GrowthArticle implements Content {
  id: ID!
  title: String!
  text: String!
  readingTime: ReadingTime!
}

type GrowthConnection {
  # Global introduction to the Growth section
  introduction: String!

  # Information to aid in pagination.
  pageInfo: PageInfo!

  edges: [GrowthEdge]

  # The current growth based on the baby's dob (returns the last content if we can't find a closer one)
  current: Growth
}

type GrowthEdge {
  # The item at the end of the edge.
  node: Growth!

  # A cursor for use in pagination.
  cursor: String!
}

# A connection to a list of items.
type GrowthArticleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [GrowthArticleEdge]
}

type GrowthArticleEdge {
  # The item at the end of the edge.
  node: GrowthArticle!

  # A cursor for use in pagination.
  cursor: String!
}


