extend type Viewer {
  babies: BabyConnection!
  baby(id: ID): Baby
  allSkillAreas(before: String, after: String, first: Int, last: Int): SkillAreaConnection!
}

extend type Mutation {
  createBaby(input: CreateBabyInput!): CreateBabyPayload
  updateBaby(input: UpdateBabyInput!): UpdateBabyPayload
  recordBabyMeasurement(input: RecordMeasurementInput!): RecordMeasurementPayload
}

extend type UserEdge {
  # Relationship to Viewer
  relationship: BabyRelationship

  # Whether the user is invited but have not accepted yet
  isPending: Boolean,
}

type Baby implements Node, Timestampable {
  id: ID!
  name: String!
  avatar: Avatar
  coverImage: Image
  # Date of birth
  dob: Date!
  # The current weight for this Baby
  weight: Float
  # The current height for this Baby
  height: Float
  gender: Gender!
  weekBorn: Int!
  createdAt: DateTime!
  updatedAt: DateTime

  # Relationship to Viewer
  relationship: BabyRelationship

  activities(
    before: String, after: String, first: Int, last: Int
  ): ActivityConnection

  activity(id: ID!): Activity

  achievements(
    before: String, after: String, first: Int, last: Int
  ): AchievementConnection

  memories(
    before: String, after: String, first: Int, last: Int, filter: MemoryFilter
  ): MemoryConnection

  measurements: Measurements
}

enum Gender {
  MALE
  FEMALE
}

enum BabyRelationship {
  Parent
  Grandparent
  Guardian
  Relative
  Nanny
  AuPair
  Other
}

input CreateBabyInput {
  name: String!
  # Date of birth
  dob: Date!
  avatar: ImageInput
  coverImage: ImageInput
  weight: Float
  height: Float
  gender: Gender!
  weekBorn: Int!
  relationship: String
}

type CreateBabyPayload {
  createdBaby: Baby

  # An opaque string used by frontend frameworks like relay to track requests and responses
  clientMutationId: String
}

input UpdateBabyInput {
  id: ID!
  name: String
  dob: Date
  avatar: ImageInput
  coverImage: ImageInput
  weight: Float
  height: Float
  gender: Gender
  weekBorn: Int
  relationship: String

  # An opaque string used by frontend frameworks like relay to track requests and responses
  clientMutationId: String
}

type UpdateBabyPayload {
  changedBaby: Baby

  # An opaque string used by frontend frameworks like relay to track requests and responses
  clientMutationId: String
}

# A connection to a list of items.
type BabyConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BabyEdge]

  # Count of result set without considering pagination arguments
  count: Int!
}

type BabyEdge {
  # The item at the end of the edge.
  node: Baby!

  # A cursor for use in pagination.
  cursor: String!
}

enum MeasurementUnit {
  kg
  cm
  in
  lbs
}

enum MeasurementType {
  height
  weight
}

input RecordMeasurementInput {
  babyId: ID!
  value: Float!
  type: MeasurementType!
  unit: MeasurementUnit!
}

type RecordMeasurementPayload {
  changedMeasurement: Measurement

  baby: Baby!

  # An opaque string used by frontend frameworks like relay to track requests and responses
  clientMutationId: String
}

type Measurements {
  heights: MeasurementConnection!
  weights: MeasurementConnection!
}

type Measurement {
  value: Float!
  unit: MeasurementUnit!
  recordedAt: DateTime!
}

# A connection to a list of items.
type MeasurementConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MeasurementEdge]
}

type MeasurementEdge {
  # The item at the end of the edge.
  node: Measurement!

  # A cursor for use in pagination.
  cursor: String!
}
