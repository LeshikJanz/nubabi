#!/usr/bin/env node
const fs = require('fs');
const childProcess = require('child_process');
const gql = require('graphql-tag');
const path = require('path');
const prettier = require('prettier');

childProcess.execSync(`node ${path.resolve(__dirname, 'extractQueries.js')}`);
console.log('Generating query tests (excluding mutations)...');
const queries = Object.keys(require('../extracted_queries.json')).filter(q => q.startsWith('query'));

const prefix = path.resolve(__dirname, '../__tests__/e2e/');
queries.forEach(queryString => {
  const query = gql`${queryString}`;
  const queryName = query.definitions[0].name.value;
  const testFilename = `${prefix}/${queryName}.gql.test.js`;

  console.log(`Writing ${testFilename}`);
  const template = `
    /* eslint-disable graphql/template-strings */
    // This file was autogenerated
    import fetch from 'isomorphic-fetch';
    import fs from 'fs';
    import path from 'path';
    import nock from 'nock';
    import gql from 'graphql-tag';
    import firebase from 'firebase';
    import { ApolloClient } from 'apollo-client';
    import { IntrospectionFragmentMatcher } from 'react-apollo';
    import config from 'core/config';
    import { authTokenMiddleware } from 'core/configureApollo';
    import ServerNetworkInterface from '../../core/helpers/serverNetworkInterface';
    
    const networkInterface = new ServerNetworkInterface(process.env.NUBABI_GRAPHQL_ENDPOINT);
    const apollo = new ApolloClient({
      networkInterface,
      fragmentMatcher: new IntrospectionFragmentMatcher({
        introspectionQueryResultData: require('../../platforms/server/graphql/introspection.json')
          .data,
      }),
    });
    
    const start = async () => {
      firebase.initializeApp(config.firebase);
      const user = await firebase.auth().signInWithEmailAndPassword(
        process.env.NUBABI_E2E_USER_NAME,
        process.env.NUBABI_E2E_USER_PASSWORD,
      );
    
      const token = await user.getToken();
    
      networkInterface.use([
        authTokenMiddleware({
          getState: () => ({ auth: { token }})
        })
      ]);
    
      return true;
    };
    
    beforeAll(() => start());
    
    describe('E2E GraphQL', () => {
      test('${queryName} GQL', (done) => {
        const queryString = fs.readFileSync(path.resolve(__dirname, '../../__generated__/${queryName}.graphql'), 'utf-8');
        
        const query = gql\`\${queryString}\`;
        const variables = {};

        apollo.query({ query, variables }).then(resp => {
          expect(JSON.parse(JSON.stringify(resp.data))).toMatchSnapshot('${queryName}');
          done();
        }).catch(err => done(err));
      });
    });
  `;

  fs.writeFileSync(testFilename, prettier.format(template), 'utf-8');
});
/*

const nockBack = nock.back;
nockBack.fixtures = __dirname + '/__fixtures__/';

describe('E2E', () => {
  queries.forEach(q => {
    const query = gql`${q}`;
    const queryName = query.definitions[0].name.value;


    test(queryName, (done) => {
      nockBack(`${queryName}.json`, (nockDone) => {
        apollo.query({ query })
          .then(resp => {
            expect(JSON.parse(JSON.stringify(resp.data)))
              .toMatchSnapshot(queryName);
          })
          .catch(err => {
            throw new Error(err);
          })
          .finally(() => {
            nockDone();
            done();
          });
      });
    });
  });
});
*/
